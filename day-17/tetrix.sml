
val input = ">><>><<<<><<<<><<<>><>>><>>>><>>>><>><<>>><<<>>><<>><>>><<>>>><<<<>>><<<>>>><<>>>><<<<>>><<<>><<<<><>><<>><<>><<>>><<<>><<<>>>><<>>>><<<<>>><<<>><>><<<>><<<<>>>><>>>><<>>><<>>><<>>><<><>>>><<<<><<<<>>><>>><<<<>>>><>>>><><<>><<>><<<<><<<<>>><<<<>>><<>>><<<><<<>><<<>><><<>>>><<<<><<<>><<<<>>><>>><<>><<>>><>>>><<<<>>>><<<<>>><<<<>>>><<<<>>>><>><<<<><<<<>><<>>><<>>>><<<>>>><<>>><<<<><<<><>><>><<<<>>><<<>><<<>><<<<>><<>>><<>><<>>><<<<>>>><>><<<<>>>><<<<>>><>>><<<<>>><<>>>><<>>><<><>>><>><<<<><<<<><<<>>><<<<>>><<<<>>>><>>>><<<>>>><>>>><<<<>><>><<<<><>><<<>>><<<<>><<<<>>>><<<>>><<<<>>>><<<><<><<<><<><<<<>><<>>>><<>>>><<<<>><>>><<<<>>>><<<><<<<>>>><<<<>>><<>>>><<>>>><<<><<>><<<>>><<<<>>><><>>>><>><<<<>>>><<<<>>>><>><<><<>>><>><>><<<>>>><<<>>>><<>>><<<<>>><<>><>>>><<<<>>><<<<>><>><><>><>><><<>><<>>>><<<>>>><<<>>><<<><<<><<<<><<<>><>><<>>><<<>><<><<<<>><<<<>><<<>>>><<>><<<><><<><<>>><<<<>>>><<><>><<<<><<>>>><<<><<>><<>>><<<>><<>><<>><<<<>>><<<>><<>><<<>><<<>>><<<>>><<<><<<<>><>>><<>><<<>>>><<>><<>><>><<<<><<>>><>><<>>>><<<>>>><<<><<>>><<<<><<<<>><><<<>>><<>>>><<<>><<<<>><>><<<><<<>>>><<<<>>><>>>><<>>>><<<><<<>><<<<>>><<<>>>><<<>><<<><<><<<>>>><>><<<>><<>><<<<>>>><<<<>>><<<>>><<>>><<<>>>><<>><<<<>>><<<>>><<>><><<>>><<<>>>><<<<>>>><<<<>>>><<<>>><<<<>>>><>><<>>>><>>>><<>>>><<>>>><<<><<<>><<<>>><<>>>><<<>><<>>><<>>><<<<>>><><><<><>>>><<<>>><><<<<>><<<>><<<<>>>><<<<>>><<>><<<>>><>>><<<<>>>><>><<<><<<<>>>><<>>><>>><<>><<>>>><<<<><<><>>>><<<<>><>>>><>>>><><<<>>>><<>><<>>><<>><<>><>>>><<>><<>><<<<>>><<<<>>>><<<<>>><<><<<>>>><<><<><<<<>><<<><<><<<<>>>><>>><>>><<<<>>>><<<>>>><>><<>>>><<>>>><<<>>>><<<><<<><<<<>>>><<>><<><<<>>>><><<><<<>>><>>>><>><>>>><<<<>><<<<>><<<<>>>><><<<<><<><<<>><><<<>>>><><><>>><<<<>>><<<>>>><>><<<>>><<<>><>><<>><<<<>>>><<<>>><<<>>><<<<>>>><>>><<>><<<<>>>><<<>>><>>>><<<><<><<>><<<>><>>>><<<<><<<><<<<>><<<><<<<>>><<<<>>>><<<>>><>><<<>>>><<<<>>><>><<<>>><<<<>>><<<<><<<<>>><<>>>><<>>>><>>><<<>><<<<>>><<<<><<>><>>><<>>>><<<<><>>>><<<>>><><<<>>>><><>>>><>><<<>>><<<>>>><<<<>>><<<<>>><<<<>><<<><<<<><<<>>><>>><<<>><<<<>><<<>><<<><<<<><<><<<<>>><<>><<>>><><<><>>>><<>>><<<<><<>>><>>>><<<>>><<>>>><><<<>>><<><<<<>><><<><<<>>><<<>>>><<>>>><<>>>><<>>><<<<>>><<<>>><<<><<<>>><>><<<>><<>>>><<>>>><<<>>><<<<>><<<<>>>><<<<>>><<>>><<<<><>>>><>>><<>><<<<>>>><<<<><<>>>><<<>>><<<>><<>>><>><<<>>><<<<><<<<>>><>><<<>><<<<>>><<<><<<><<<>>><>><<>>>><>>><<<<>>><<<>>><>>>><<><><<<<><>>>><><>>>><<<<>><<<<>><>>><<>><<<><<>>>><<<>><<<>><<<>>><<<<>><<<>>>><>><<>>><<<<>>>><<>>>><<<>>><<<<>>>><<<>><><<<<>>>><>>>><<>>><<<<>>><<<>>>><<><<<>>><<>>>><<<<>><<<><<>>><<<>>><<<<><<>>>><><<<<>><<<>>>><<<<>><<<<>>><<<>><<<><>><<<>><<<<>>><<>><<>>><<><<<<>><>>>><<<>>>><<>>>><<>>><<>><<<<>><<<>>>><<>>><<<>>><<<<>><>>>><>>>><<<<>>>><<>><<>>><<<<>>>><>><>>><>><<>><<<<>>><<<>>>><<<<>><<<<><<>><<<<>><<<<>><<<<>>><<<>>>><<<>>><<<>><<<<>>>><<<<>>>><<<<><>><>>>><><<<><>><<<<><<<<>><<<>>>><<>>><<<<>>>><<<<><>>><<>>>><<<>>><<<>>>><<><<<<>><<<>>><>>><<><<<<>>><<<<>><<<<><<>>>><>>><<<>>><<<<><<>><<<><>>>><<>>><<<>>><<<><<>>>><<<>><<<><>><<>><<>><<<>>><<<>>>><<>>>><<<<><<>>>><<<<>><>><<>><<<<>><<>>><<>><<<><<<>>><<>>><<<<>>><<<<>><<<<>><<<<>>>><<<>><<<<>><><<>>>><<<<>>><<<>>><<>><<>>>><<<>>><<>><<<<>><<<>>>><<<<>>>><<><<<<>>><><<>>><<<<>>>><<<>>>><<>><><><<<<><<<><<<>>>><>>>><<<<>><<>>>><<<>>>><<>>><><<>>>><<<<>>><<<>>><<>>>><<<>>><<<>><<<>>>><>>><<<<>>>><<<<>>><<>><<><<<>><<>>>><<<>>><><>>><<>>>><<<>><<>>><<<<>>>><<<<>>>><<>>>><<>><><<>>>><<><<>><<<><<<>>>><<<<><<><<<<>><<<>><<<<><<>>>><<><<<>>>><<<>><>><<><<>>><>><<<<>>><<<>>><<>>><<<>><<>>>><<<>>>><<<<>><><<<>>><><<<<>>>><<<<><>>><>>><<<<>><<<>>>><<>>><<<<>>><<<>><<<><<>><<<>>>><<>>><<<>><>>><<<<>>><<>>>><<<<>>><<>>>><<<><<<<><><<<>><<><<>>><><<<>><<<><><<<><<>>>><<<<><>>><<<>>>><<<<>>><<>>><<><<<<>><<<>>><<<<>><><<>>>><>>>><>>>><<<<>>>><<<>><<<>><<<<>>><<<<><>>><<<<><>>>><><<<>><<<<><<>>>><<<<>>>><<>><<>>><><>>>><>><>>><<>>>><<<>>><<<<><<<>><<<<>>><<>>>><<<<>>><<<<>>>><<>>>><>><<><>>>><<<<>>><<<<><>>>><<<<>><<>>><<<<>><<<>><>>><<><<><<<<>><<><<<<>>>><>>>><<>>><>>><<<<>>>><<<>>><<<<><<<<>>><<>>><<>>>><<<><<<>>>><<<>>><<<><<<<><<>>>><<<>>>><<<<>>><>><<<<>><<><<>>><<><<<>>>><<<<>><<<>>><<><<<>>>><<><<<<><<<<>><<><>><<>>>><>><<<><>>>><<<<>><<<<>><<>>><<<>><<>>>><<<><<>><<<>>>><<<<>>>><><<><>>>><<<>>>><><<<<><<<<>>>><<>>>><<<<>><<<<>><<<<>>><<<><>><<>>>><<><<>>>><<<>><<>><<<<>>>><<<><<<>>>><<<>><<>>><<>>><><<>>>><><>><<<>>>><<<><>><<<<>>>><<><>>>><>>><<<<><<<<>><<>>>><<<><<>>><<>><<<>>>><<><<>>>><<<<>>><>>>><<><<<>>><><<<>>><<<>>><<<>><<<><<>>><<<>>>><<<<>><>>>><<>>>><<<>>>><>><<>>>><<>><<<>>><<>>><<><<>>>><<>><<>>><>>><<<<>>>><>>><<<<>><<<<><>>><>>>><<<>><<<<>>>><<<><>><><<<>>><<<>>>><>>><<>>><<<<>><<<>>>><<<>>>><<<<>><<<<>>><>>>><><><><<<<>>>><<<<><<<<><<<<>>>><<<>>>><<>><<<<><>><<>>><<<><><>><<<>>><<<<>>>><><<<<>>>><><<>>><<>><<>>><>><>><<<>><<>>>><>><<><<<>>>><<<>>><<<<>><<<<>>><<<<>>><<<<>>>><><<>><>>><<<<>>>><><<>>>><<<<>>><<>>><>>>><<>>><><<><<>>>><<<<><<<<><<>>>><<>>>><>>>><<<><>>><<<>>>><<<><<>>><<>><<<><<<<>>><<<>><<>>><>>>><>><<>>><><<<><>>>><<>>><<<><>><<<>><<<<>>>><<<<>><>>><<>>><>><<><<><<<<>><<<><<<>>><>>>><<<<>>><<>>>><<<>>><<>><<>><<<>>>><>><>><>>><<<<>>><<<>>>><<<<>>><<<>>>><>><<>>><<>><<>>>><<<>><<>>>><<<<><<<<><<<<>>><<<>><<<>><<<<>>><<<><<<<>><<>><<>>><<<>>><<>>><<<<><<<<>>><<>>>><<<>>><<>><<<<>><<<<>>>><<<<><<<>>>><<<<>>>><><>>><<>><<<>><<>>>><<>>>><<<>><<>>><<<<>>>><<<<>>>><<>>><<<<>>><<<<><<>>>><<<>>>><<<>><<<>><<>><<<<><<<<>>>><<<>>><<><>>><<><<>>>><<<>>>><<<<><<<<>>><<<<><<<>>>><<>>>><<>>><<>>><<<>><<><<<<><<>><<<<><<<><<<><<>><<<>>>><<<><<>><<>>>><<<><<<<>>><<<>>>><><><<><<<>>><<<<>>><<<>><<<>>>><>>>><<><<>><<>><>>>><<<>><<<>>><>>>><<<<>>><<<<>>><<<>>><<<>>>><<<<>>><<>>>><<<>>>><<<>>><>>>><<><<<>><<>>>><<<<>>><>>><<>>><<<<><>><<>>>><>>><<>>><<><>>><>>><><<><><<>><<<<>>>><>><<<<>>><<>>><<>><>>>><<<>>>><<<<>><<><<<<>>>><<<<><<><><<<<>><<>>>><<<><>>>><>><><<>><<<>>><<>>>><<><<<>>><<<<>>>><<<<>><<><<<>>><<<<>>>><<<>>>><<<>>>><<><<<>>>><<<<>>>><>><>>>><<>>>><<<>><<>>><<<>>>><<>>>><<<<>><>>>><<>>>><<<>>>><<<><<<>><<<<>>><><<<<><<<<>><<<>><<<>>>><<<><<><<<>><<<<>>>><<<>>><<>>><<>>><><<>>>><>>>><<><>>><><<<<>>>><>>><>>><<>><>>>><<<<>><<>><<><<<<>><<<<>>>><<<<>>>><<<><<<<>>>><<<<>>><<><<<><<><<>>><<<<>><<<>>>><<<>>>><<<>>>><<<>><>><<<><><<>>>><<<<><<<><<<<><<>>><<<>>>><<<<><<<<>><<>>>><<>><<><<<<>>>><><<<<>><<><<<>>><>>><>><>>>><<<<>><<>>>><><<<>>><<>>>><<<>>>><<<<>>><<>><<<<>><<>>>><<<>>>><<<<><>>><<<<>><<>><<<>>><><<>>><>><<<>>>><>><<<>>>><<<<><<>>>><><<<<>>><<<<>><<<>>>><<>>>><<<<>>>><<<<>><<><<<><<<>>>><<<<><<<<>>>><><>>><<>><<<>><<>><<>>>><>>><<<<><<<<>>><<>>>><<<>>>><>>>><<<<>><>>>><>>><<<>>>><>>>><<>>>><<><<>>>><>>>><><<<<><>>><<><<<>>>><>><<>>>><<<>><<>><<>>><<<><<<<>>><<<><<><>>><<><<><<<><<<>>>><<>>><<<<>><<<><>><<>>><<<<>>><>>><<>><<<>>>><>>>><<<<>><>><>><>>><<<<>><<>><><<>>><<<>>><<<><>><<<<>><<<>><<>><<<>>>><<>><<<<>>><>>><<><<>>><>>>><<><<<<>>>><<<<>>>><<>>>><<<>><<<>><<<>>>><>>><>>>><<><<<>>><<><<>>><>><<<<><<<<>>>><<<>>><>><<>>><>><>><<><<<<>><><>>><<<><<<<>>>><<<<><<<<>>><<<<>>>><<<>>>><<>>>><<<<><>>>><>>><<<<><<>><<<<><<<<>><>><<<>>><><<<<>><>>><>>><<><><<<<>><<<<>>><<<>>><>>>><<>>><<>>><<>><>>><<<>><><<>>>><><<<>><<<>>>><<<>>><>><<>>><<<<>><<<<>>>><<<<>><<<>>><<<<>>><><>>>><<>><<>>>><<<<><<<<>>>><<>><<>><>><<<<><<>>>><<<>>><>><<<<>>>><<>><<<>>>><<>>><<<><<<>><<<<><>><><<<<>>>><<<>><<<>>><<<>>>><<<>>><<<<>>>><<<>>><>><<<><<<>><><<>>>><>><>>><<<>>>><<>>>><>>>><<>>><<<<><<<<>><<<<>><<<<>>><<<<>>><<>>><><<<>>>><><<<>>><<>>>><<<<>>>><<>><>>>><<<<>><<>>><>><>>>><<>>><<<<>>>><<>>><<>>><><<<<>><<<>>><<<<>>>><>>><<><<>><>>><<>>><<><><<<><>>><<><<<>>>><>>><<<>><<>><<><<<<>><><<<<>>>><<<>><>>><>>><<<><>>>><<<><>><<<<><<<<><<<>><<>><<>><<<<>>>><<>>><<>><<<<>>>><>>><>>><<<<>>>><>><<<<>>><<>>>><<>>>><<<>><<<><<>>><>><<<<>>>><<>><<<>>><>><<<>><>>>><>>><<<>>><>><>><<<>><<<>><<<<>><<<>><<<<><>>><<<>>><<>>><<<>><<<>><>><<<<>><<>>><<<>>><<<>><<<<><<<>>>><>><<>>>><<<><>>>><<<>>>><>>><>><<>><<>>><<<<>><<<<>>>><>>><>>>><<<<><<<>><<>>>><<<<>>><><<>>>><>><<>>>><<<><<><>>>><<<>><>>><<<>>>><<<<><<>><>>><>>>><><<<>>>><<<<><><<<>>><<<>><><<<>>><<<>><<<>><<<><>>><><<<<><<<<>>>><<<><<>><<<<><<>><<<<>>>><<<<><>>>><<<><>>>><<<<>>><<<<><<><<<><<>><<>><<<<>>>><<<>>>><<<<>>>><<<>>>><<<<>>>><<<<>>>><>>><<<<>>><<<<>><>>>><>><>><>>><<>>>><>>>><<<<>><<<<>><>><<<<><<>>><<>><>>>><<<<>>><<>><<<<>>>><<<>>><>><<<<>>><<<>>><<<<>>><<<><<<<><<<<>>>><<<>><<<>>><>>><<<<>>>><<>>>><<<><<<>>><<>>>><<<>><>>><>>>><<<<>><<<>><<>>>><>>>><<<>><<><><<<<>>>><<>>><<>>>><<>>><<>>><<>>>><>><><<<<>>><<<<>>><<<>><<<<>><>>><<>>><<><<<>>>><<>><><>><<><>>><<<>><<><<<><<<>><<<<><<<<>>>><<<><<<<>>>><<<<><>><>><<<>><<<<>>>><<>>>><<>>><>>><<<>>>><<<><<><<<>><<><<>>>><<<><<<>><<<<>>>><<>>><<<<>><<>><><>><<>>><<<<>><<><<><<>>><<>>><<<<>>><<<<>><<<<><><>>><<<<><<>>>><<<<><>>><<>><<<<>><<>><<<><<<><<<<>>>><<>>><<>><>><>>>><>>>><>><<>>>><<<<>>><>><<><<<>>>><<<>>><<<>>><<><<>><<>>><<>>><<<<><<<<>>>><><<<<><<>>>><<<<><><<>>>><>><<>>>><>>>><<<>><<<<>>>><<<<>>>><<<<>>><>><<><<>>><>>>><<<>><<<>>><<>>><>>><<<>>>><>><<<>>>><<<<><<><<>>><<<<>>><<<>>>><<>>>><>><<<><<<>><<<<><><<><<<>>><<<>>><>>><>>><<<<>><<<><>>>><<<<><><<<<>>><<<>>>><<>><<<<>>>><<<>>><<<<>>>><<>>><<>>>><<<<>><><>>><>>>><<<<>>>><<<>>><<><<>><>>>><<>>>><>>>><<>>>><<<>><<<>>><<<><<>>><<<>>>><<>>>><<>>><<<<>><>><<<<><<>><<>><<>>><<<><<>>>><>>><<<<><<<<>>>><><<>>>><<<>><<>>>><<<>>><<<<>>>><<<<>>>><><>>>><<<>><<<>>><<>><<<<>>>><>>><<><<<><<<<>>>><<>>><><<<>>>><<><><>><><<>>>><<<<>>><>>><<<<>>><<>>>><<>><<<>>>><<<>>><<<<>>><<<>><<<<><>><<<><><<><<<<><<<><<<>>><<><<<>>>><<<>>><<<<>>><<<<>>>><<<>><<<<>>><<><><<<><>>><<<>>>><>>><<<<>>><<<<>>>><<<>>>><<<>><<>><<>>>><<>>><<>><><<<>>>><<<<><>>><<<<>>><<<>><<<<>><<>>>><<>>><<<>>>><<>><<<>>>><<<<>>><><>><<<>>><<<<>>><<<<>><<<>>><>>><<>><><<<>><><>>><<>><<>><<<>>>><<>>>><><>><<<>>><>><<>><<<<>>>><<>>>><<<>><<>>><>>><<<<>><<<<>>><<>>><<>>><<<<>><<>><<><<<<>>>><<>>>><>>><<>>><<>>><<<>><<<>><<<<>><<<<><>>><<<<>><<<><><<<<>>><<>>>><>>>><<>><<<<><<<<>>><<<>>><<<<>>><<<>>><<<>><<<>><>>><<>>>><<<><<<>>>><<<<>>>><>>><<><<<><><<<>><>>><<<>>>><>><<<>>>><<<><<>>"


datatype shape_name = FLATBAR | PLUS | WEDGE | TALLBAR | SQUARE ;

val shape_order = [ FLATBAR, PLUS, WEDGE, TALLBAR, SQUARE ] ;

fun shape_succ FLATBAR = PLUS
  | shape_succ PLUS = WEDGE
  | shape_succ WEDGE = TALLBAR
  | shape_succ TALLBAR = SQUARE
  | shape_succ SQUARE = FLATBAR

type matrix = (char list) list

fun shape_width FLATBAR = 4
  | shape_width PLUS = 3
  | shape_width WEDGE = 3
  | shape_width TALLBAR = 1
  | shape_width SQUARE = 2

(* These are specified upside down. *)
fun shape FLATBAR : matrix = 
     [ [ #"#" , #"#", #"#", #"#" ] ]

  | shape TALLBAR = 
     [ [ #"#" ] ,
       [ #"#" ] ,
       [ #"#" ] ,
       [ #"#" ] ]

  | shape PLUS = 
     [ [ #" " , #"#" , #" " ] ,
       [ #"#" , #"#" , #"#" ] ,
       [ #" " , #"#" , #" " ] ]

  | shape WEDGE = 
     [ [ #"#" , #"#" , #"#" ] ,
       [ #" " , #" " , #"#" ] ,
       [ #" " , #" " , #"#" ] ]

  | shape SQUARE = 
     [ [ #"#" , #"#" ] ,
       [ #"#" , #"#" ] ]
    ;



type xpos = int
type ypos = int


signature WorldSig = 
sig
  type world

  val max_height : world -> ypos

  val print_world : world -> unit

  val freeze : world * matrix * xpos * ypos -> world

end;


exception Unfinished

exception Collision


fun max(a,b) = if a > b then a else b
fun min(a,b) = if a < b then a else b


structure IntMap = RedBlackMapFn(struct 
  type ord_key=int
  fun compare (a,b) = if a < b then LESS else if a = b then EQUAL else GREATER
end)


functor WorldFn(val jets_string : string) =
struct

  type row = char list

  type world_grid = row IntMap.map

  datatype object_state = Curr of xpos * ypos * shape_name
                        | Next of shape_name

  type jet_state = char list

  type world = {rows : world_grid,
                obj : object_state,
                jets : jet_state}



  val world0 : world = 
      { rows = IntMap.empty , obj = Next(FLATBAR) , jets = explode jets_string }

  fun get_row ({rows,...} : world) (y : ypos) : row =
    case IntMap.find (rows, y) of 
       SOME(row) => row
     | NONE => [ #" ", #" ", #" ", #" ", #" ", #" ", #" " ]

  fun set_row ({rows,obj,jets}: world) (y : ypos) (row : row) : world =
     {rows=IntMap.insert(rows, y, row), obj=obj, jets=jets}


  fun is_blank_row (world : world) y = 
    case get_row world y of
       [ #" ", #" ", #" ", #" ", #" ", #" ", #" " ] => true
     | _ => false

  

  fun find_top_help n world =
    if is_blank_row world n
    then n
    else find_top_help (n+1) world
    
  val find_top = find_top_help 0

  fun max_height world = find_top world

  fun print_row (world : world) (i : int) =
    let
      val row = get_row world i
    in
      print("|");
      print(implode(row));
      print("|");
      print("\n")
    end


  fun intro_object (world : world) (shape_name : shape_name) : world =
    { rows = #rows world,
      obj = Curr(2,find_top(world)+3,shape_name),
      jets = #jets world } 

   
  fun print_rows (world : world, bottom : int, top : int) = 
    if top < bottom
    then
      ()
    else
      (print_row world top; print_rows (world, bottom, top-1)) ;

  fun print_world world =
    let
      val height = max_height (world)
    in
      print_rows (world, 0, height + 7);
      print (" height: ");
      print (Int.toString height);
      print ("\n")
    end



  fun merge_lines ([],[]) = []
    | merge_lines ([],l2) = l2
    | merge_lines (l1,[]) = l1
    | merge_lines (#" "::r1, #" "::r2) = #" "::(merge_lines(r1,r2))
    | merge_lines (#" "::r1, #"#"::r2) = #"#"::(merge_lines(r1,r2))
    | merge_lines (#"#"::r1, #" "::r2) = #"#"::(merge_lines(r1,r2))
    | merge_lines (#"#"::_,  #"#"::_)  = raise Collision
 
  fun pad (0,line) = line
    | pad (n,line) = #" " :: pad(n-1,line)

 
  fun paste_line (world : world) (x : xpos, y: ypos) (line : char list) : world =
    let
      val row = get_row world y
      val new_row = merge_lines( row , pad(x,line) )
    in
      set_row world y new_row
    end


  fun paste_object (world : world) (x : xpos, y : ypos) ([]) = world
    | paste_object world (x,y) (ln::rest) = 
        paste_line (paste_object world (x,y+1) rest) (x,y) ln


  fun freeze ({rows,obj=Curr(x,y,shape_name),jets} : world) : world =
        paste_object {rows=rows, obj=Next(shape_succ shape_name), jets=jets} (x,y) (shape shape_name)
    | freeze world = world



  fun force_down ({rows,obj=Curr(x,y,shape),jets} : world) : world =
    {rows=rows, obj=Curr(x,y-1,shape),jets=jets}



  fun try_move_left {rows,obj=Curr(0,y,shape),jets} = {rows=rows,obj=Curr(0,y,shape),jets=jets}
    | try_move_left {rows,obj=Curr(x,y,shape),jets} = {rows=rows,obj=Curr(x-1,y,shape),jets=jets}


  fun try_move_right {rows,obj=Curr(x,y,shape),jets} = 
        {rows=rows,obj=Curr(min(7-(shape_width shape),x+1),y,shape),jets=jets}


  fun is_collided world =
    (freeze world; false) handle Collision => true

  fun process_jet (world : world) : world =
   ( (* print(" processing jets: ") ;
        print(implode (#jets world));
      print("\n") ; *)
    case world of 
       {rows, obj, jets = #"<" :: rest} => 
         let 
           val try_left = try_move_left {rows=rows, obj=obj, jets=rest}
         in
           if is_collided try_left
           then {rows=rows, obj=obj, jets=rest}
           else try_left
         end
     | {rows, obj, jets = #">" :: rest} => 
         let
           val try_right = try_move_right {rows=rows, obj=obj, jets=rest}
         in
           if is_collided try_right
           then {rows=rows, obj=obj, jets=rest}
           else try_right
         end
   )

  fun can_drop {obj=Curr(_,0,_),...} : bool = false
    | can_drop world =
      (freeze ( force_down world ); true) handle Collision => false

  fun process_drop world = 
    if can_drop world
    then
      force_down world
    else
      freeze world

  fun print_frozen world = print_world (freeze world)


  fun next (world : world) : world =
    case (world : world) of 
        {rows, obj=Next(shape), jets} => {rows=rows,
                                          obj=Curr (2, 3 + max_height world,shape), 
                                          jets=jets}

     |  {rows, obj, jets=[]} => {rows=rows, obj=obj, jets=explode jets_string}

     |  {rows, obj, jets} =>
        let
           val moved_world = process_jet world 
           val dropped_world = process_drop moved_world
        in 
           dropped_world
        end


  fun next_n 0 world = world
    | next_n n world = 
       (print "step ";
        print (Int.toString n);
        print "\n";
        print_frozen world;
        next_n (n-1) (next world))


 fun next_rock' (world as {rows,obj=Next shape,jets} : world) : world = world
   | next_rock' (world as {rows,obj=Curr (_,_,_),jets}) = next_rock' (next world)


 fun next_rock (world : world) : world = next_rock' (next world)

 fun next_rock_n 0 world = world
   | next_rock_n n world = next_rock_n (n-1) (next_rock world)

 
end;



val sample_input = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>" ;

structure World = WorldFn(val jets_string = input) ;



val world = World.world0 ;
(* World.print_frozen world ; *)



(* World.print_rows (world, 0, 20) ; *)


val world = World.next_rock_n 2022 world ;
World.print_frozen world ;





OS.Process.exit(OS.Process.success);

